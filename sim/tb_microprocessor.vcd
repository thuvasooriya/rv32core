$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module tb_microprocessor $end
  $var wire 1 v clk $end
  $var wire 32 x instruction [31:0] $end
  $var wire 1 w rst $end
  $var wire 32 y res_out [31:0] $end
  $scope module u_microprocessor0 $end
   $var wire 1 v clk $end
   $var wire 1 w rst $end
   $var wire 32 x instruction [31:0] $end
   $var wire 32 # instruction_data [31:0] $end
   $var wire 32 P pc_address [31:0] $end
   $var wire 32 $ load_data_out [31:0] $end
   $var wire 32 i alu_out_address [31:0] $end
   $var wire 32 j store_data [31:0] $end
   $var wire 4 k mask [3:0] $end
   $var wire 4 l instruc_mask_singal [3:0] $end
   $var wire 1 m instruction_mem_we_re $end
   $var wire 1 n instruction_mem_request $end
   $var wire 1 Q instruc_mem_valid $end
   $var wire 1 R data_mem_valid $end
   $var wire 1 o data_mem_we_re $end
   $var wire 1 p data_mem_request $end
   $var wire 1 V load_signal $end
   $var wire 1 z store $end
   $scope module u_core $end
    $var wire 1 v clk $end
    $var wire 1 w rst $end
    $var wire 1 R data_mem_valid $end
    $var wire 1 Q instruc_mem_valid $end
    $var wire 32 # instruction [31:0] $end
    $var wire 32 $ load_data_in [31:0] $end
    $var wire 1 V load_signal $end
    $var wire 1 m instruction_mem_we_re $end
    $var wire 1 n instruction_mem_request $end
    $var wire 1 o data_mem_we_re $end
    $var wire 1 p data_mem_request $end
    $var wire 4 k mask_singal [3:0] $end
    $var wire 4 l instruc_mask_singal [3:0] $end
    $var wire 32 j store_data_out [31:0] $end
    $var wire 32 i alu_out_address [31:0] $end
    $var wire 32 P pc_address [31:0] $end
    $var wire 32 # instruc_data_out [31:0] $end
    $var wire 32 S pre_address_pc [31:0] $end
    $var wire 1 V load $end
    $var wire 1 W store $end
    $var wire 1 X next_sel $end
    $var wire 1 Y branch_result $end
    $var wire 4 k mask [3:0] $end
    $var wire 4 Z alu_control [3:0] $end
    $var wire 2 [ mem_to_reg [1:0] $end
    $var wire 32 % op_b [31:0] $end
    $var wire 32 q opa_mux_out [31:0] $end
    $var wire 32 \ opb_mux_out [31:0] $end
    $var wire 32 i alu_res_out [31:0] $end
    $var wire 32 T next_sel_address [31:0] $end
    $var wire 32 r wrap_load_out [31:0] $end
    $var wire 32 s rd_wb_data [31:0] $end
    $scope module u_decodestage $end
     $var wire 1 v clk $end
     $var wire 1 w rst $end
     $var wire 32 # instruction [31:0] $end
     $var wire 32 S pc_address [31:0] $end
     $var wire 32 s rd_wb_data [31:0] $end
     $var wire 1 V load $end
     $var wire 1 W store $end
     $var wire 1 X next_sel $end
     $var wire 1 Y branch_result $end
     $var wire 4 Z alu_control [3:0] $end
     $var wire 2 [ mem_to_reg [1:0] $end
     $var wire 32 q opa_mux_out [31:0] $end
     $var wire 32 \ opb_mux_out [31:0] $end
     $var wire 32 % opb_data [31:0] $end
     $var wire 1 ] reg_write $end
     $var wire 1 ^ branch $end
     $var wire 1 _ operand_a $end
     $var wire 1 ` operand_b $end
     $var wire 3 a imm_sel [2:0] $end
     $var wire 32 & op_a [31:0] $end
     $var wire 32 % op_b [31:0] $end
     $var wire 32 b imm_mux_out [31:0] $end
     $var wire 32 ' i_immo [31:0] $end
     $var wire 32 ( s_immo [31:0] $end
     $var wire 32 ) sb_immo [31:0] $end
     $var wire 32 * uj_immo [31:0] $end
     $var wire 32 + u_immo [31:0] $end
     $scope module u_mux1 $end
      $var wire 32 & a [31:0] $end
      $var wire 32 S b [31:0] $end
      $var wire 1 _ sel $end
      $var wire 32 q out [31:0] $end
     $upscope $end
     $scope module u_mux2 $end
      $var wire 32 % a [31:0] $end
      $var wire 32 b b [31:0] $end
      $var wire 1 ` sel $end
      $var wire 32 \ out [31:0] $end
     $upscope $end
     $scope module u_branch0 $end
      $var wire 32 & op_a [31:0] $end
      $var wire 32 % op_b [31:0] $end
      $var wire 3 , fun3 [2:0] $end
      $var wire 1 ^ en $end
      $var wire 1 Y result $end
     $upscope $end
     $scope module u_cu0 $end
      $var wire 7 - opcode [6:0] $end
      $var wire 3 , fun3 [2:0] $end
      $var wire 1 . fun7 $end
      $var wire 1 ] reg_write $end
      $var wire 3 a imm_sel [2:0] $end
      $var wire 1 ` operand_b $end
      $var wire 1 _ operand_a $end
      $var wire 2 [ mem_to_reg [1:0] $end
      $var wire 1 V Load $end
      $var wire 1 W Store $end
      $var wire 1 ^ Branch $end
      $var wire 1 W mem_en $end
      $var wire 1 X next_sel $end
      $var wire 4 Z alu_control [3:0] $end
      $var wire 1 c r_type $end
      $var wire 1 d i_type $end
      $var wire 1 V load $end
      $var wire 1 W store $end
      $var wire 1 ^ branch $end
      $var wire 1 e jal $end
      $var wire 1 f jalr $end
      $var wire 1 g lui $end
      $var wire 1 h auipc $end
      $scope module u_controldec0 $end
       $var wire 3 , fun3 [2:0] $end
       $var wire 1 . fun7 $end
       $var wire 1 d i_type $end
       $var wire 1 c r_type $end
       $var wire 1 V load $end
       $var wire 1 W store $end
       $var wire 1 ^ branch $end
       $var wire 1 e jal $end
       $var wire 1 f jalr $end
       $var wire 1 g lui $end
       $var wire 1 h auipc $end
       $var wire 1 V Load $end
       $var wire 1 W Store $end
       $var wire 2 [ mem_to_reg [1:0] $end
       $var wire 1 ] reg_write $end
       $var wire 1 W mem_en $end
       $var wire 1 ` operand_b $end
       $var wire 1 _ operand_a $end
       $var wire 3 a imm_sel [2:0] $end
       $var wire 1 ^ Branch $end
       $var wire 1 X next_sel $end
       $var wire 4 Z alu_control [3:0] $end
      $upscope $end
      $scope module u_typedec0 $end
       $var wire 7 - opcode [6:0] $end
       $var wire 1 c r_type $end
       $var wire 1 d i_type $end
       $var wire 1 V load $end
       $var wire 1 W store $end
       $var wire 1 ^ branch $end
       $var wire 1 e jal $end
       $var wire 1 f jalr $end
       $var wire 1 g lui $end
       $var wire 1 h auipc $end
      $upscope $end
     $upscope $end
     $scope module u_imm_gen0 $end
      $var wire 32 # instr [31:0] $end
      $var wire 32 ' i_imme [31:0] $end
      $var wire 32 ( s_imme [31:0] $end
      $var wire 32 ) sb_imme [31:0] $end
      $var wire 32 * uj_imme [31:0] $end
      $var wire 32 + u_imme [31:0] $end
     $upscope $end
     $scope module u_mux0 $end
      $var wire 32 ' a [31:0] $end
      $var wire 32 ( b [31:0] $end
      $var wire 32 ) c [31:0] $end
      $var wire 32 * d [31:0] $end
      $var wire 32 + e [31:0] $end
      $var wire 32 { f [31:0] $end
      $var wire 32 | g [31:0] $end
      $var wire 32 } h [31:0] $end
      $var wire 3 a sel [2:0] $end
      $var wire 32 b out [31:0] $end
     $upscope $end
     $scope module u_regfile0 $end
      $var wire 1 v clk $end
      $var wire 1 w rst_n_i $end
      $var wire 1 ] wen_i $end
      $var wire 5 / raddr1_i [4:0] $end
      $var wire 5 0 raddr2_i [4:0] $end
      $var wire 5 1 waddr_i [4:0] $end
      $var wire 32 s wdata_i [31:0] $end
      $var wire 32 & rdata1_o [31:0] $end
      $var wire 32 % rdata2_o [31:0] $end
      $var wire 32 2 regs[0] [31:0] $end
      $var wire 32 3 regs[1] [31:0] $end
      $var wire 32 4 regs[2] [31:0] $end
      $var wire 32 5 regs[3] [31:0] $end
      $var wire 32 6 regs[4] [31:0] $end
      $var wire 32 7 regs[5] [31:0] $end
      $var wire 32 8 regs[6] [31:0] $end
      $var wire 32 9 regs[7] [31:0] $end
      $var wire 32 : regs[8] [31:0] $end
      $var wire 32 ; regs[9] [31:0] $end
      $var wire 32 < regs[10] [31:0] $end
      $var wire 32 = regs[11] [31:0] $end
      $var wire 32 > regs[12] [31:0] $end
      $var wire 32 ? regs[13] [31:0] $end
      $var wire 32 @ regs[14] [31:0] $end
      $var wire 32 A regs[15] [31:0] $end
      $var wire 32 B regs[16] [31:0] $end
      $var wire 32 C regs[17] [31:0] $end
      $var wire 32 D regs[18] [31:0] $end
      $var wire 32 E regs[19] [31:0] $end
      $var wire 32 F regs[20] [31:0] $end
      $var wire 32 G regs[21] [31:0] $end
      $var wire 32 H regs[22] [31:0] $end
      $var wire 32 I regs[23] [31:0] $end
      $var wire 32 J regs[24] [31:0] $end
      $var wire 32 K regs[25] [31:0] $end
      $var wire 32 L regs[26] [31:0] $end
      $var wire 32 M regs[27] [31:0] $end
      $var wire 32 N regs[28] [31:0] $end
      $var wire 32 O regs[29] [31:0] $end
     $upscope $end
    $upscope $end
    $scope module u_executestage $end
     $var wire 32 q a_i [31:0] $end
     $var wire 32 \ b_i [31:0] $end
     $var wire 4 Z alu_control [3:0] $end
     $var wire 32 S pc_address [31:0] $end
     $var wire 32 i alu_res_out [31:0] $end
     $var wire 32 T next_sel_address [31:0] $end
     $scope module u_adder0 $end
      $var wire 32 S a [31:0] $end
      $var wire 32 T adder_out [31:0] $end
     $upscope $end
     $scope module u_alu0 $end
      $var wire 32 q a_i [31:0] $end
      $var wire 32 \ b_i [31:0] $end
      $var wire 4 Z op_i [3:0] $end
      $var wire 32 i res_o [31:0] $end
     $upscope $end
    $upscope $end
    $scope module u_fetchstage $end
     $var wire 1 v clk $end
     $var wire 1 w rst $end
     $var wire 1 X next_sel $end
     $var wire 1 R valid $end
     $var wire 1 V load $end
     $var wire 1 Y branch_reselt $end
     $var wire 32 i next_address [31:0] $end
     $var wire 32 ~ address_in [31:0] $end
     $var wire 32 # instruction_fetch [31:0] $end
     $var wire 1 m we_re $end
     $var wire 1 n request $end
     $var wire 4 l mask [3:0] $end
     $var wire 32 P address_out [31:0] $end
     $var wire 32 # instruction [31:0] $end
     $var wire 32 S pre_address_pc [31:0] $end
     $scope module u_pc0 $end
      $var wire 32 !! WIDTH [31:0] $end
      $var wire 1 v clk $end
      $var wire 1 w rst $end
      $var wire 1 V load $end
      $var wire 1 X next_sel $end
      $var wire 1 R dmem_valid $end
      $var wire 1 Y branch_reselt $end
      $var wire 32 i next_address [31:0] $end
      $var wire 32 ~ address_in [31:0] $end
      $var wire 32 P address_out [31:0] $end
      $var wire 32 S pre_address_pc [31:0] $end
      $var wire 32 S prev_addr [31:0] $end
     $upscope $end
    $upscope $end
    $scope module u_memorystage $end
     $var wire 1 w rst $end
     $var wire 1 V load $end
     $var wire 1 W store $end
     $var wire 1 Q valid $end
     $var wire 32 % op_b [31:0] $end
     $var wire 32 i alu_out_address [31:0] $end
     $var wire 32 # instruction [31:0] $end
     $var wire 32 $ wrap_load_in [31:0] $end
     $var wire 1 o we_re $end
     $var wire 1 p request $end
     $var wire 4 k mask [3:0] $end
     $var wire 32 j store_data_out [31:0] $end
     $var wire 32 r wrap_load_out [31:0] $end
     $scope module u_wrap_mem0 $end
      $var wire 32 % data_i [31:0] $end
      $var wire 2 t byteadd [1:0] $end
      $var wire 3 , fun3 [2:0] $end
      $var wire 1 W mem_en $end
      $var wire 1 V Load $end
      $var wire 32 $ wrap_load_in [31:0] $end
      $var wire 4 k masking [3:0] $end
      $var wire 32 j data_o [31:0] $end
      $var wire 32 r wrap_load_out [31:0] $end
     $upscope $end
    $upscope $end
    $scope module u_wbstage $end
     $var wire 2 [ mem_to_reg [1:0] $end
     $var wire 32 i alu_out [31:0] $end
     $var wire 32 r data_mem_out [31:0] $end
     $var wire 32 T next_sel_address [31:0] $end
     $var wire 32 s rd_sel_mux_out [31:0] $end
     $scope module u_mux2 $end
      $var wire 32 i a [31:0] $end
      $var wire 32 r b [31:0] $end
      $var wire 32 T c [31:0] $end
      $var wire 32 "! d [31:0] $end
      $var wire 2 [ sel [1:0] $end
      $var wire 32 s out [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module u_data_memory $end
    $var wire 1 #! INSTR_MEM $end
    $var wire 1 v clk $end
    $var wire 1 w rst $end
    $var wire 1 o we_re $end
    $var wire 1 p request $end
    $var wire 1 V load $end
    $var wire 4 k mask [3:0] $end
    $var wire 8 u address [7:0] $end
    $var wire 32 j data_in [31:0] $end
    $var wire 1 R valid $end
    $var wire 32 $ data_out [31:0] $end
    $scope module u_memory $end
     $var wire 1 #! INSTR_MEM $end
     $var wire 1 v clk $end
     $var wire 1 o we_re $end
     $var wire 1 p request $end
     $var wire 8 u address [7:0] $end
     $var wire 32 j data_in [31:0] $end
     $var wire 4 k mask [3:0] $end
     $var wire 32 $ data_out [31:0] $end
    $upscope $end
   $upscope $end
   $scope module u_instruction_memory $end
    $var wire 1 $! INSTR_MEM $end
    $var wire 1 v clk $end
    $var wire 1 w rst $end
    $var wire 1 m we_re $end
    $var wire 1 n request $end
    $var wire 4 l mask [3:0] $end
    $var wire 8 U address [7:0] $end
    $var wire 32 x data_in [31:0] $end
    $var wire 1 Q valid $end
    $var wire 32 # data_out [31:0] $end
    $scope module u_memory $end
     $var wire 1 $! INSTR_MEM $end
     $var wire 1 v clk $end
     $var wire 1 m we_re $end
     $var wire 1 n request $end
     $var wire 8 U address [7:0] $end
     $var wire 32 x data_in [31:0] $end
     $var wire 4 l mask [3:0] $end
     $var wire 32 # data_out [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b000 ,
b0000000 -
0.
b00000 /
b00000 0
b00000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
0Q
0R
b00000000000000000000000000000000 S
b00000000000000000000000000000100 T
b00000000 U
0V
0W
0X
0Y
b0000 Z
b00 [
b00000000000000000000000000000000 \
0]
0^
0_
0`
b000 a
b00000000000000000000000000000000 b
0c
0d
0e
0f
0g
0h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b0000 k
b1111 l
0m
1n
0o
0p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00 t
b00000000 u
0v
1w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
0z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000100000 !!
b00000000000000000000000000000000 "!
0#!
1$!
#5
b00000000001000000000010100010011 #
b00000000000000000000000000000010 '
b00000000000000000000000000001010 (
b00000000000000000000000000001010 )
b00000000000000000000000000000010 *
b00000000001000000000000000000000 +
b0010011 -
b00010 0
b01010 1
b00000000000000000000000000000100 P
1Q
b00000001 U
b00000000000000000000000000000010 \
1]
1`
b00000000000000000000000000000010 b
1d
b00000000000000000000000000000010 i
b00000000000000000000000000000010 s
b10 t
1v
#10
b00000000000000000000000000000000 P
0Q
b00000000000000000000000000000100 S
b00000000000000000000000000001000 T
b00000000 U
0v
0w
#15
b00000000000000000000000000000010 G
b00000000000000000000000000000000 S
b00000000000000000000000000000100 T
1v
#20
0v
1w
#25
b00000000000000000000000000000100 P
1Q
b00000001 U
1v
#30
0v
#35
b00000000000100000000000100010011 #
b00000000000000000000000000000001 '
b00000000000000000000000000000010 (
b00000000000000000000000000000010 )
b00000000000000000000100000000000 *
b00000000000100000000000000000000 +
b00001 0
b00010 1
b00000000000000000000000000001000 P
b00000000000000000000000000000100 S
b00000000000000000000000000001000 T
b00000010 U
b00000000000000000000000000000001 \
b00000000000000000000000000000001 b
b00000000000000000000000000000001 i
b00000000000000000000000000000001 s
b01 t
1v
#40
0v
#45
b00000001010000000000000011101111 #
b00000000000000000000000000010100 '
b00000000000000000000000000000001 (
b00000000000000000000100000000000 )
b00000000000000000000000000010100 *
b00000001010000000000000000000000 +
b1101111 -
b10100 0
b00001 1
b00000000000000000000000000000001 O
b00000000000000000000000000001100 P
b00000000000000000000000000001000 S
b00000000000000000000000000001100 T
b00000011 U
1X
b10 [
b00000000000000000000000000010100 \
1_
b011 a
b00000000000000000000000000010100 b
0d
1e
b00000000000000000000000000011100 i
b00000000000000000000000000001000 q
b00000000000000000000000000001100 s
b00 t
b00000111 u
1v
#50
0v
#55
b00000000100000010000000110010011 #
b00000000000000000000000000000001 &
b00000000000000000000000000001000 '
b00000000000000000000000000000011 (
b00000000000000000000100000000010 )
b00000000000000010000000000001000 *
b00000000100000010000000000000000 +
b0010011 -
b00010 /
b01000 0
b00011 1
b00000000000000000000000000011100 P
b00000000000000000000000000001100 S
b00000000000000000000000000010000 T
b00000111 U
0X
b00 [
b00000000000000000000000000001000 \
0_
b000 a
b00000000000000000000000000001000 b
1d
0e
b00000000000000000000000000001001 i
b00000000000000000000000000000001 q
b00000000000000000000000000001001 s
b01 t
b00000010 u
1v
#60
0v
#65
b00000000001000010000001000110011 #
b00000000000000000000000000000001 %
b00000000000000000000000000000010 '
b00000000000000000000000000000100 (
b00000000000000000000000000000100 )
b00000000000000010000000000000010 *
b00000000001000010000000000000000 +
b0110011 -
b00010 0
b00100 1
b00000000000000000000000000001001 N
b00000000000000000000000000100000 P
b00000000000000000000000000011100 S
b00000000000000000000000000100000 T
b00001000 U
b00000000000000000000000000000001 \
0`
b00000000000000000000000000000010 b
1c
0d
b00000000000000000000000000000010 i
b00000000000000000000000000000010 s
b10 t
b00000000 u
1v
#70
0v
#75
b00000000000000001000000001100111 #
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000001000000000000000 *
b00000000000000001000000000000000 +
b1100111 -
b00001 /
b00000 0
b00000 1
b00000000000000000000000000000010 M
b00000000000000000000000000100100 P
b00000000000000000000000000100000 S
b00000000000000000000000000100100 T
b00001001 U
1X
b00000000000000000000000000000000 \
1`
b00000000000000000000000000000000 b
0c
1f
b00000000000000000000000000000000 i
b00000000000000000000000000000000 q
b00000000000000000000000000000000 s
b00 t
1v
#80
0v
#85
b00000000000000000000000000110011 #
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b0110011 -
b00000 /
b00000000000000000000000000000000 P
b00000000000000000000000000100100 S
b00000000000000000000000000101000 T
b00000000 U
0X
0`
1c
0f
1v
#90
0v
#95
b00000000001000000000010100010011 #
b00000000000000000000000000000001 %
b00000000000000000000000000000010 '
b00000000000000000000000000001010 (
b00000000000000000000000000001010 )
b00000000000000000000000000000010 *
b00000000001000000000000000000000 +
b0010011 -
b00010 0
b01010 1
b00000000000000000000000000000100 P
b00000000000000000000000000000000 S
b00000000000000000000000000000100 T
b00000001 U
b00000000000000000000000000000010 \
1`
b00000000000000000000000000000010 b
0c
1d
b00000000000000000000000000000010 i
b00000000000000000000000000000010 s
b10 t
1v
#100
0v
#105
b00000000000100000000000100010011 #
b00000000000000000000000000000000 %
b00000000000000000000000000000001 '
b00000000000000000000000000000010 (
b00000000000000000000000000000010 )
b00000000000000000000100000000000 *
b00000000000100000000000000000000 +
b00001 0
b00010 1
b00000000000000000000000000001000 P
b00000000000000000000000000000100 S
b00000000000000000000000000001000 T
b00000010 U
b00000000000000000000000000000001 \
b00000000000000000000000000000001 b
b00000000000000000000000000000001 i
b00000000000000000000000000000001 s
b01 t
1v
#110
0v
#115
b00000001010000000000000011101111 #
b00000000000000000000000000010100 '
b00000000000000000000000000000001 (
b00000000000000000000100000000000 )
b00000000000000000000000000010100 *
b00000001010000000000000000000000 +
b1101111 -
b10100 0
b00001 1
b00000000000000000000000000001100 P
b00000000000000000000000000001000 S
b00000000000000000000000000001100 T
b00000011 U
1X
b10 [
b00000000000000000000000000010100 \
1_
b011 a
b00000000000000000000000000010100 b
0d
1e
b00000000000000000000000000011100 i
b00000000000000000000000000001000 q
b00000000000000000000000000001100 s
b00 t
b00000111 u
1v
#120
0v
#125
b00000000100000010000000110010011 #
b00000000000000000000000000000001 &
b00000000000000000000000000001000 '
b00000000000000000000000000000011 (
b00000000000000000000100000000010 )
b00000000000000010000000000001000 *
b00000000100000010000000000000000 +
b0010011 -
b00010 /
b01000 0
b00011 1
b00000000000000000000000000011100 P
b00000000000000000000000000001100 S
b00000000000000000000000000010000 T
b00000111 U
0X
b00 [
b00000000000000000000000000001000 \
0_
b000 a
b00000000000000000000000000001000 b
1d
0e
b00000000000000000000000000001001 i
b00000000000000000000000000000001 q
b00000000000000000000000000001001 s
b01 t
b00000010 u
1v
#130
0v
#135
b00000000001000010000001000110011 #
b00000000000000000000000000000001 %
b00000000000000000000000000000010 '
b00000000000000000000000000000100 (
b00000000000000000000000000000100 )
b00000000000000010000000000000010 *
b00000000001000010000000000000000 +
b0110011 -
b00010 0
b00100 1
b00000000000000000000000000100000 P
b00000000000000000000000000011100 S
b00000000000000000000000000100000 T
b00001000 U
b00000000000000000000000000000001 \
0`
b00000000000000000000000000000010 b
1c
0d
b00000000000000000000000000000010 i
b00000000000000000000000000000010 s
b10 t
b00000000 u
1v
#140
0v
#145
b00000000000000001000000001100111 #
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000001000000000000000 *
b00000000000000001000000000000000 +
b1100111 -
b00001 /
b00000 0
b00000 1
b00000000000000000000000000100100 P
b00000000000000000000000000100000 S
b00000000000000000000000000100100 T
b00001001 U
1X
b00000000000000000000000000000000 \
1`
b00000000000000000000000000000000 b
0c
1f
b00000000000000000000000000000000 i
b00000000000000000000000000000000 q
b00000000000000000000000000000000 s
b00 t
1v
#150
0v
#155
b00000000000000000000000000110011 #
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b0110011 -
b00000 /
b00000000000000000000000000000000 P
b00000000000000000000000000100100 S
b00000000000000000000000000101000 T
b00000000 U
0X
0`
1c
0f
1v
#160
0v
#165
b00000000001000000000010100010011 #
b00000000000000000000000000000001 %
b00000000000000000000000000000010 '
b00000000000000000000000000001010 (
b00000000000000000000000000001010 )
b00000000000000000000000000000010 *
b00000000001000000000000000000000 +
b0010011 -
b00010 0
b01010 1
b00000000000000000000000000000100 P
b00000000000000000000000000000000 S
b00000000000000000000000000000100 T
b00000001 U
b00000000000000000000000000000010 \
1`
b00000000000000000000000000000010 b
0c
1d
b00000000000000000000000000000010 i
b00000000000000000000000000000010 s
b10 t
1v
#170
0v
#175
b00000000000100000000000100010011 #
b00000000000000000000000000000000 %
b00000000000000000000000000000001 '
b00000000000000000000000000000010 (
b00000000000000000000000000000010 )
b00000000000000000000100000000000 *
b00000000000100000000000000000000 +
b00001 0
b00010 1
b00000000000000000000000000001000 P
b00000000000000000000000000000100 S
b00000000000000000000000000001000 T
b00000010 U
b00000000000000000000000000000001 \
b00000000000000000000000000000001 b
b00000000000000000000000000000001 i
b00000000000000000000000000000001 s
b01 t
1v
#180
0v
#185
b00000001010000000000000011101111 #
b00000000000000000000000000010100 '
b00000000000000000000000000000001 (
b00000000000000000000100000000000 )
b00000000000000000000000000010100 *
b00000001010000000000000000000000 +
b1101111 -
b10100 0
b00001 1
b00000000000000000000000000001100 P
b00000000000000000000000000001000 S
b00000000000000000000000000001100 T
b00000011 U
1X
b10 [
b00000000000000000000000000010100 \
1_
b011 a
b00000000000000000000000000010100 b
0d
1e
b00000000000000000000000000011100 i
b00000000000000000000000000001000 q
b00000000000000000000000000001100 s
b00 t
b00000111 u
1v
#190
0v
#195
b00000000100000010000000110010011 #
b00000000000000000000000000000001 &
b00000000000000000000000000001000 '
b00000000000000000000000000000011 (
b00000000000000000000100000000010 )
b00000000000000010000000000001000 *
b00000000100000010000000000000000 +
b0010011 -
b00010 /
b01000 0
b00011 1
b00000000000000000000000000011100 P
b00000000000000000000000000001100 S
b00000000000000000000000000010000 T
b00000111 U
0X
b00 [
b00000000000000000000000000001000 \
0_
b000 a
b00000000000000000000000000001000 b
1d
0e
b00000000000000000000000000001001 i
b00000000000000000000000000000001 q
b00000000000000000000000000001001 s
b01 t
b00000010 u
1v
#200
0v
#205
b00000000001000010000001000110011 #
b00000000000000000000000000000001 %
b00000000000000000000000000000010 '
b00000000000000000000000000000100 (
b00000000000000000000000000000100 )
b00000000000000010000000000000010 *
b00000000001000010000000000000000 +
b0110011 -
b00010 0
b00100 1
b00000000000000000000000000100000 P
b00000000000000000000000000011100 S
b00000000000000000000000000100000 T
b00001000 U
b00000000000000000000000000000001 \
0`
b00000000000000000000000000000010 b
1c
0d
b00000000000000000000000000000010 i
b00000000000000000000000000000010 s
b10 t
b00000000 u
1v
#210
0v
#215
b00000000000000001000000001100111 #
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000001000000000000000 *
b00000000000000001000000000000000 +
b1100111 -
b00001 /
b00000 0
b00000 1
b00000000000000000000000000100100 P
b00000000000000000000000000100000 S
b00000000000000000000000000100100 T
b00001001 U
1X
b00000000000000000000000000000000 \
1`
b00000000000000000000000000000000 b
0c
1f
b00000000000000000000000000000000 i
b00000000000000000000000000000000 q
b00000000000000000000000000000000 s
b00 t
1v
#220
0v
