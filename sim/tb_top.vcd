$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module tb_top $end
  $var wire 1 x clk $end
  $var wire 1 y reset $end
  $var wire 2 z flag [1:0] $end
  $var wire 32 # instr [31:0] $end
  $var wire 32 $ memWdata [31:0] $end
  $var wire 32 % addr [31:0] $end
  $var wire 32 & pc [31:0] $end
  $var wire 32 ' aluIn1 [31:0] $end
  $var wire 32 ( aluIn2 [31:0] $end
  $var wire 32 ) Simm [31:0] $end
  $var wire 32 * Jimm [31:0] $end
  $var wire 32 + Bimm [31:0] $end
  $var wire 32 , Iimm [31:0] $end
  $var wire 32 - memRdata [31:0] $end
  $var wire 5 . rs1Id [4:0] $end
  $var wire 5 / rs2Id [4:0] $end
  $var wire 5 0 rdId [4:0] $end
  $var wire 5 1 leds [4:0] $end
  $var wire 4 2 memWMask [3:0] $end
  $var wire 4 3 aluControl [3:0] $end
  $var wire 1 4 isALUreg $end
  $var wire 1 5 regWrite $end
  $var wire 1 6 isJAL $end
  $var wire 1 7 isJALR $end
  $var wire 1 8 isBranch $end
  $var wire 1 9 isLUI $end
  $var wire 1 : isAUIPC $end
  $var wire 1 ; isALUimm $end
  $var wire 1 < isLoad $end
  $var wire 1 = isStore $end
  $var wire 1 > isShamt $end
  $scope module dut $end
   $var wire 1 x clk $end
   $var wire 1 y reset $end
   $var wire 32 & pc [31:0] $end
   $var wire 32 # instr [31:0] $end
   $var wire 32 $ memWdata [31:0] $end
   $var wire 32 % addr [31:0] $end
   $var wire 32 ' aluIn1 [31:0] $end
   $var wire 32 ( aluIn2 [31:0] $end
   $var wire 32 ) Simm [31:0] $end
   $var wire 32 * Jimm [31:0] $end
   $var wire 32 + Bimm [31:0] $end
   $var wire 32 , Iimm [31:0] $end
   $var wire 32 - memRdata [31:0] $end
   $var wire 5 . rs1Id [4:0] $end
   $var wire 5 / rs2Id [4:0] $end
   $var wire 5 0 rdId [4:0] $end
   $var wire 4 2 memWMask [3:0] $end
   $var wire 4 3 aluControl [3:0] $end
   $var wire 1 4 isALUreg $end
   $var wire 1 5 regWrite $end
   $var wire 1 6 isJAL $end
   $var wire 1 7 isJALR $end
   $var wire 1 8 isBranch $end
   $var wire 1 9 isLUI $end
   $var wire 1 : isAUIPC $end
   $var wire 1 ; isALUimm $end
   $var wire 1 < isLoad $end
   $var wire 1 = isStore $end
   $var wire 1 > isShamt $end
   $var wire 5 1 leds [4:0] $end
   $var wire 1 ? isZero $end
   $var wire 1 @ isIO $end
   $var wire 1 A isRAM $end
   $var wire 3 B funct3 [2:0] $end
   $var wire 7 C funct7 [6:0] $end
   $scope module aluD $end
    $var wire 3 B funct3 [2:0] $end
    $var wire 7 C funct7 [6:0] $end
    $var wire 1 D instr_5 $end
    $var wire 1 8 isBranch $end
    $var wire 1 4 isALUreg $end
    $var wire 1 ; isALUimm $end
    $var wire 4 3 aluControl [3:0] $end
    $var wire 1 > isShamt $end
   $upscope $end
   $scope module decoder $end
    $var wire 32 # instr [31:0] $end
    $var wire 1 4 isALUreg $end
    $var wire 1 5 regWrite $end
    $var wire 1 6 isJAL $end
    $var wire 1 7 isJALR $end
    $var wire 1 8 isBranch $end
    $var wire 1 9 isLUI $end
    $var wire 1 : isAUIPC $end
    $var wire 1 ; isALUimm $end
    $var wire 1 < isLoad $end
    $var wire 1 = isStore $end
    $var wire 32 { len [31:0] $end
    $var wire 1 E isSYSTEM $end
   $upscope $end
   $scope module dmem $end
    $var wire 1 x clk $end
    $var wire 4 F memWMask [3:0] $end
    $var wire 32 % a [31:0] $end
    $var wire 32 $ wd [31:0] $end
    $var wire 32 - rd [31:0] $end
   $upscope $end
   $scope module dpath $end
    $var wire 1 x clk $end
    $var wire 1 y reset $end
    $var wire 1 4 isALUreg $end
    $var wire 1 5 regWrite $end
    $var wire 1 6 isJAL $end
    $var wire 1 7 isJALR $end
    $var wire 1 8 isBranch $end
    $var wire 1 9 isLUI $end
    $var wire 1 : isAUIPC $end
    $var wire 1 < isLoad $end
    $var wire 1 = isStore $end
    $var wire 1 > isShamt $end
    $var wire 3 B funct3 [2:0] $end
    $var wire 4 3 aluControl [3:0] $end
    $var wire 32 # instr [31:0] $end
    $var wire 32 - memRdata [31:0] $end
    $var wire 32 & pc [31:0] $end
    $var wire 32 % aluOut [31:0] $end
    $var wire 32 $ memWdata [31:0] $end
    $var wire 32 ' aluIn1 [31:0] $end
    $var wire 32 ( aluIn2 [31:0] $end
    $var wire 32 ) Simm [31:0] $end
    $var wire 32 * Jimm [31:0] $end
    $var wire 32 + Bimm [31:0] $end
    $var wire 32 , Iimm [31:0] $end
    $var wire 5 . rs1Id [4:0] $end
    $var wire 5 / rs2Id [4:0] $end
    $var wire 5 0 rdId [4:0] $end
    $var wire 4 2 memWMask [3:0] $end
    $var wire 1 ? isZero $end
    $var wire 2 G memByteAccess [1:0] $end
    $var wire 2 H memHalfwordAccess [1:0] $end
    $var wire 8 I loadByte [7:0] $end
    $var wire 16 J loadHalfword [15:0] $end
    $var wire 32 K pcNext [31:0] $end
    $var wire 32 L pcplus4 [31:0] $end
    $var wire 32 M pcplusImm [31:0] $end
    $var wire 32 N aluIn2Pre [31:0] $end
    $var wire 32 O rd2 [31:0] $end
    $var wire 32 P wd3 [31:0] $end
    $var wire 32 Q loadData [31:0] $end
    $var wire 32 R Uimm [31:0] $end
    $var wire 5 S shamt [4:0] $end
    $var wire 1 T loadSign $end
    $scope module alu $end
     $var wire 4 3 aluControl [3:0] $end
     $var wire 32 ' op1 [31:0] $end
     $var wire 32 ( op2 [31:0] $end
     $var wire 32 % aluOut [31:0] $end
     $var wire 1 ? isZero $end
    $upscope $end
    $scope module pcadd1 $end
     $var wire 32 & a [31:0] $end
     $var wire 32 | b [31:0] $end
     $var wire 32 L y [31:0] $end
    $upscope $end
    $scope module pcreg $end
     $var wire 1 x clk $end
     $var wire 1 y reset $end
     $var wire 32 K d [31:0] $end
     $var wire 32 & q [31:0] $end
    $upscope $end
    $scope module regF $end
     $var wire 1 x clk $end
     $var wire 1 5 we3 $end
     $var wire 5 . ra1 [4:0] $end
     $var wire 5 / ra2 [4:0] $end
     $var wire 5 0 wa3 [4:0] $end
     $var wire 32 P wd3 [31:0] $end
     $var wire 32 ' rd1 [31:0] $end
     $var wire 32 O rd2 [31:0] $end
     $var wire 32 U rf[0] [31:0] $end
     $var wire 32 V rf[1] [31:0] $end
     $var wire 32 W rf[2] [31:0] $end
     $var wire 32 X rf[3] [31:0] $end
     $var wire 32 Y rf[4] [31:0] $end
     $var wire 32 Z rf[5] [31:0] $end
     $var wire 32 [ rf[6] [31:0] $end
     $var wire 32 \ rf[7] [31:0] $end
     $var wire 32 ] rf[8] [31:0] $end
     $var wire 32 ^ rf[9] [31:0] $end
     $var wire 32 _ rf[10] [31:0] $end
     $var wire 32 ` rf[11] [31:0] $end
     $var wire 32 a rf[12] [31:0] $end
     $var wire 32 b rf[13] [31:0] $end
     $var wire 32 c rf[14] [31:0] $end
     $var wire 32 d rf[15] [31:0] $end
     $var wire 32 e rf[16] [31:0] $end
     $var wire 32 f rf[17] [31:0] $end
     $var wire 32 g rf[18] [31:0] $end
     $var wire 32 h rf[19] [31:0] $end
     $var wire 32 i rf[20] [31:0] $end
     $var wire 32 j rf[21] [31:0] $end
     $var wire 32 k rf[22] [31:0] $end
     $var wire 32 l rf[23] [31:0] $end
     $var wire 32 m rf[24] [31:0] $end
     $var wire 32 n rf[25] [31:0] $end
     $var wire 32 o rf[26] [31:0] $end
     $var wire 32 p rf[27] [31:0] $end
     $var wire 32 q rf[28] [31:0] $end
     $var wire 32 r rf[29] [31:0] $end
     $var wire 32 s rf[30] [31:0] $end
     $var wire 32 t rf[31] [31:0] $end
    $upscope $end
   $upscope $end
   $scope module imem $end
    $var wire 8 u a [7:0] $end
    $var wire 32 # rd [31:0] $end
   $upscope $end
   $scope module io $end
    $var wire 1 x clk $end
    $var wire 1 y reset $end
    $var wire 1 v enable $end
    $var wire 32 % addr [31:0] $end
    $var wire 32 $ memWdata [31:0] $end
    $var wire 1 @ isIO $end
    $var wire 5 1 leds [4:0] $end
    $var wire 32 } IO_LEDS_bit [31:0] $end
    $var wire 30 w wordAddr [29:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000010000000000000110110111 #
b00000000000000000000000000000000 $
b00000000000000000000000000000100 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000100 (
b00000000000000000000000000000011 )
b00000000000000000000000000000100 *
b00000000000000000000100000000010 +
b00000000000000000000000000000100 ,
b00000000000000000000000000000000 -
b00000 .
b00100 /
b00011 0
b00000 1
b0001 2
b0000 3
04
15
06
07
08
19
0:
0;
0<
0=
0>
0?
0@
1A
b000 B
b0000000 C
1D
0E
b0000 F
b01 G
b00 H
b00000000 I
b0000000000000000 J
b00000000000000000000000000000100 K
b00000000000000000000000000000100 L
b00000000010000000000000000000000 M
b00000000000000000000000000000100 N
b00000000000000000000000000000000 O
b00000000010000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000010000000000000000000000 R
b00100 S
0T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000 u
0v
b000000000000000000000000000001 w
0x
1y
b00 z
b00000000000000000000000000000110 {
b00000000000000000000000000000100 |
b00000000000000000000000000000000 }
#5000
#10000
b00000000010000000000000000000000 X
1x
#15000
0x
0y
#17000
#20000
b00100000000000000000000100010011 #
b00000000000000000000001000000000 %
b00000000000000000000000000000100 &
b00000000000000000000001000000000 (
b00000000000000000000001000000010 )
b00000000000000000000001000000000 *
b00000000000000000000001000000010 +
b00000000000000000000001000000000 ,
b00000 /
b00010 0
09
1;
b0010000 C
0D
b00000000000000000000000000001000 K
b00000000000000000000000000001000 L
b00100000000000000000000000000100 M
b00000000000000000000001000000000 N
b00000000000000000000001000000000 P
b00100000000000000000000000000000 R
b00000 S
b00000001 u
b000000000000000000000010000000 w
1x
#25000
0x
#30000
b00000000111000000000001010010011 #
b00000000000000000000000000001110 %
b00000000000000000000000000001000 &
b00000000000000000000000000001110 (
b00000000000000000000000000000101 )
b00000000000000000000000000001110 *
b00000000000000000000100000000100 +
b00000000000000000000000000001110 ,
b01110 /
b00101 0
b0100 2
b0000000 C
b00000000000000000000000000001100 K
b00000000000000000000000000001100 L
b00000000111000000000000000001000 M
b00000000000000000000000000001110 N
b00000000000000000000000000001110 P
b00000000111000000000000000000000 R
b01110 S
b00000000000000000000001000000000 W
b00000010 u
b000000000000000000000000000011 w
1x
#35000
0x
#40000
b00000010010100000010000000100011 #
b00000000000000000000000000001110 $
b00000000000000000000000000100000 %
b00000000000000000000000000001100 &
b00000000000000000000000000100000 (
b00000000000000000000000000100000 )
b00000000000000000010100000100100 *
b00000000000000000000000000100000 +
b00000000000000000000000000100101 ,
b00101 /
b00000 0
b1111 2
05
0;
1=
b010 B
b0000001 C
1D
b1111 F
b00 G
b00000000000000000000000000010000 K
b00000000000000000000000000010000 L
b00000000000000000000000000101100 M
b00000000000000000000000000100000 N
b00000000000000000000000000001110 O
b00000000000000000000000000100000 P
b00000010010100000010000000000000 R
b00101 S
b00000000000000000000000000001110 Z
b00000011 u
b000000000000000000000000001000 w
1x
#45000
0x
#50000
b00000010000000000010001100000011 #
b00000000000000000000000000000000 $
b00000000000000000000000000010000 &
b00000000000000000000000000100110 )
b00000000000000000010000000100000 *
b00000000000000000000000000100110 +
b00000000000000000000000000100000 ,
b00000000000000000000000000001110 -
b00000 /
b00110 0
15
1<
0=
0D
b0000 F
b00001110 I
b0000000000001110 J
b00000000000000000000000000010100 K
b00000000000000000000000000010100 L
b00000000000000000000000000110110 M
b00000000000000000000000000000000 O
b00000000000000000000000000001110 P
b00000000000000000000000000001110 Q
b00000010000000000010000000000000 R
b00000 S
b00000100 u
1x
#55000
0x
#60000
b00000000000000110000001110110011 #
b00000000000000000000000000001110 %
b00000000000000000000000000010100 &
b00000000000000000000000000001110 '
b00000000000000000000000000000000 (
b00000000000000000000000000000111 )
b00000000000000110000000000000000 *
b00000000000000000000100000000110 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00110 .
b00111 0
b0100 2
14
0<
b000 B
b0000000 C
1D
b01 G
b00000000 I
b0000000000000000 J
b00000000000000000000000000011000 K
b00000000000000000000000000011000 L
b00000000000000110000000000010100 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 Q
b00000000000000110000000000000000 R
b00000000000000000000000000001110 [
b00000101 u
b000000000000000000000000000011 w
1x
#65000
0x
#70000
b00000000011100110000010001100011 #
b00001110000000000000111000001110 $
b00000000000000000000000000000001 %
b00000000000000000000000000011000 &
b00000000000000000000000000001110 (
b00000000000000000000000000001000 )
b00000000000000110000100000000110 *
b00000000000000000000000000001000 +
b00000000000000000000000000000111 ,
b00111 /
b01000 0
b0010 2
b1010 3
04
05
18
b00000000000000000000000000100000 K
b00000000000000000000000000011100 L
b00000000000000000000000000100000 M
b00000000000000000000000000001110 N
b00000000000000000000000000001110 O
b00000000000000000000000000000001 P
b00000000011100110000000000000000 R
b00111 S
b00000000000000000000000000001110 \
b00000110 u
b000000000000000000000000000000 w
1x
#75000
0x
#80000
b00000000011100110001010001100011 #
b00000000000000000000000000001110 $
b00000000000000000000000000000000 %
b00000000000000000000000000100000 &
b00000000000000110001100000000110 *
b0011 2
b1011 3
1?
b001 B
b00 G
b01 H
b00000000000000000000000000100100 K
b00000000000000000000000000100100 L
b00000000000000000000000000101000 M
b00000000000000000000000000000000 P
b00000000011100110001000000000000 R
b00001000 u
1x
#85000
0x
#90000
b00000000001000111001111000010011 #
b00000000000000000000001000000000 $
b00000000000000000000000000111000 %
b00000000000000000000000000100100 &
b00000000000000000000000000000010 (
b00000000000000000000000000011100 )
b00000000000000111001000000000010 *
b00000000000000000000000000011100 +
b00000000000000000000000000000010 ,
b00111 .
b00010 /
b11100 0
b0010 3
15
08
1;
1>
0?
0D
b00000000000000000000000000101000 K
b00000000000000000000000000101000 L
b00000000001000111001000000100100 M
b00000000000000000000000000000010 N
b00000000000000000000001000000000 O
b00000000000000000000000000111000 P
b00000000001000111001000000000000 R
b00010 S
b00001001 u
b000000000000000000000000001110 w
1x
#95000
0x
#100000
b00000000010100011010001000100011 #
b00000000000000000000000000001110 $
b00000000010000000000000000000100 %
b00000000000000000000000000101000 &
b00000000010000000000000000000000 '
b00000000000000000000000000000100 (
b00000000000000000000000000000100 )
b00000000000000011010100000000100 *
b00000000000000000000000000000100 +
b00000000000000000000000000000101 ,
b00011 .
b00101 /
b00100 0
b1111 2
b0000 3
05
0;
1=
0>
1@
0A
b010 B
1D
b00 H
b00000000000000000000000000101100 K
b00000000000000000000000000101100 L
b00000000000000000000000000101100 M
b00000000000000000000000000000100 N
b00000000000000000000000000001110 O
b00000000010000000000000000000100 P
b00000000010100011010000000000000 R
b00101 S
b00000000000000000000000000111000 q
b00001010 u
1v
b000000000100000000000000000001 w
1x
#105000
0x
#110000
b00000001000000000000000011101111 #
b00000000000000000000000000000000 $
b00000000000000000000000000010000 %
b00000000000000000000000000101100 &
b00000000000000000000000000000000 '
b00000000000000000000000000010000 (
b00000000000000000000000000000001 )
b00000000000000000000000000010000 *
b00000000000000000000100000000000 +
b00000000000000000000000000010000 ,
b00000 .
b10000 /
b00001 0
b01110 1
b0001 2
15
16
0=
0@
1A
b000 B
b01 G
b00000000000000000000000000111100 K
b00000000000000000000000000110000 L
b00000000000000000000000000111100 M
b00000000000000000000000000010000 N
b00000000000000000000000000000000 O
b00000000000000000000000000110000 P
b00000001000000000000000000000000 R
b10000 S
b00001011 u
0v
b000000000000000000000000000100 w
1x
#115000
0x
b01 z
#120000
b00000000001000000000111110010011 #
b00000010000000000000001000000000 $
b00000000000000000000000000000010 %
b00000000000000000000000000111100 &
b00000000000000000000000000000010 (
b00000000000000000000000000011111 )
b00000000000000000000000000000010 *
b00000000000000000000100000011110 +
b00000000000000000000000000000010 ,
b00010 /
b11111 0
b0100 2
06
1;
0D
b00000000000000000000000001000000 K
b00000000000000000000000001000000 L
b00000000001000000000000000111100 M
b00000000000000000000000000000010 N
b00000000000000000000001000000000 O
b00000000000000000000000000000010 P
b00000000001000000000000000000000 R
b00010 S
b00000000000000000000000000110000 V
b00001111 u
b000000000000000000000000000000 w
1x
#125000
0x
#130000
b01000001111111100000100100110011 #
b00000000000000100000000000000010 $
b00000000000000000000000000110110 %
b00000000000000000000000001000000 &
b00000000000000000000000000111000 '
b00000000000000000000010000010010 )
b00000000000011100000110000011110 *
b00000000000000000000010000010010 +
b00000000000000000000010000011111 ,
b11100 .
b11111 /
b10010 0
b0001 3
14
0;
b0100000 C
1D
b00000000000000000000000001000100 K
b00000000000000000000000001000100 L
b01000001111111100000000001000000 M
b00000000000000000000000000000010 O
b00000000000000000000000000110110 P
b01000001111111100000000000000000 R
b00000000000000000000000000000010 t
b00010000 u
b000000000000000000000000001101 w
1x
#135000
0x
#140000
b00000000000000001000000001100111 #
b00000000000000000000000000000000 $
b00000000000000000000000000110000 %
b00000000000000000000000001000100 &
b00000000000000000000000000110000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000001000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00001 .
b00000 /
b00000 0
b0001 2
b0000 3
04
17
b0000000 C
b00000000000000000000000000110000 K
b00000000000000000000000001001000 L
b00000000000000000000000001000100 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000001001000 P
b00000000000000001000000000000000 R
b00000 S
b00000000000000000000000000110110 g
b00010001 u
b000000000000000000000000001100 w
1x
#145000
0x
#150000
b00000011011010010111111100010011 #
b00000000000000000000000000110110 %
b00000000000000000000000000110000 &
b00000000000000000000000000110110 '
b00000000000000000000000000110110 (
b00000000000000000000000000111110 )
b00000000000010010111000000110110 *
b00000000000000000000000000111110 +
b00000000000000000000000000110110 ,
b10010 .
b10110 /
b11110 0
b1111 2
b1001 3
07
1;
b111 B
b0000001 C
0D
b00 G
b00000000000000000000000000110100 K
b00000000000000000000000000110100 L
b00000011011010010111000000110000 M
b00000000000000000000000000110110 N
b00000000000000000000000000110110 P
b00000011011010010111000000000000 R
b10110 S
b00000000000000000000000001001000 U
b00001100 u
b000000000000000000000000001101 w
1x
#155000
0x
b10 z
#160000
b00000000000000000000000000010011 #
b00000000000000000000000000000000 %
b00000000000000000000000000110100 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000 .
b00000 /
b00000 0
b0001 2
b0000 3
1?
b000 B
b0000000 C
b01 G
b00000000000000000000000000111000 K
b00000000000000000000000000111000 L
b00000000000000000000000000110100 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 P
b00000000000000000000000000000000 R
b00000 S
b00000000000000000000000000110110 s
b00001101 u
b000000000000000000000000000000 w
1x
#165000
0x
